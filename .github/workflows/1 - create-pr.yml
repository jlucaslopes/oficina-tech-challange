name: CI Feature Branch

on:
  push:
    branches:
      - "feat**"

jobs:
  build-test:
    name: Build & Test (Maven + Java 21)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: maven

      - name: Build and run tests
        run: mvn clean verify -B

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: build-test
    defaults:
      run:
        working-directory: infra/terraform
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.6

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -no-color

  create-pr:
    name: Create or Update Pull Request (no marketplace)
    runs-on: ubuntu-latest
    needs: terraform-plan
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract branch info
        id: vars
        run: |
          echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          echo "REPO=${GITHUB_REPOSITORY}" >> $GITHUB_ENV
          echo "BASE_BRANCH=develop" >> $GITHUB_ENV

      - name: Check if PR already exists
        id: check_pr
        run: |
          echo "🔍 Checking if PR already exists for ${BRANCH_NAME}..."
          API_URL="https://api.github.com/repos/${REPO}/pulls?head=${REPO}:${BRANCH_NAME}&base=${BASE_BRANCH}"
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$API_URL")
          COUNT=$(echo "$RESPONSE" | jq 'length')
          echo "PR_COUNT=$COUNT" >> $GITHUB_ENV

      - name: Create PR if not exists
        if: env.PR_COUNT == '0'
        run: |
          echo "🆕 Creating Pull Request from ${BRANCH_NAME} to ${BASE_BRANCH}"
          BODY=$(cat <<EOF
  🚀 Pull request criado automaticamente após build, test e terraform plan bem-sucedidos.

- Branch: ${BRANCH_NAME}
- Autor: @${GITHUB_ACTOR}
  EOF
  )
  API_URL="https://api.github.com/repos/${REPO}/pulls"
  DATA=$(jq -n \
--arg title "Feature: ${BRANCH_NAME} → ${BASE_BRANCH}" \
  --arg head "${BRANCH_NAME}" \
  --arg base "${BASE_BRANCH}" \
  --arg body "$BODY" \
  '{title: $title, head: $head, base: $base, body: $body, draft: false}')
curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
  -H "Accept: application/vnd.github+json" \
  -d "$DATA" "$API_URL"

- name: Update existing PR (optional comment)
  if: env.PR_COUNT != '0'
  run: |
    echo "📝 PR already exists. Adding comment with new plan result."
    PLAN=$(cat infra/plan.txt | head -n 30) # resumo
    PR_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
      "https://api.github.com/repos/${REPO}/pulls?head=${REPO}:${BRANCH_NAME}&base=${BASE_BRANCH}" | jq -r '.[0].number')
    
    COMMENT_BODY=$(jq -n --arg body "📦 Terraform plan result:\n\n\`\`\`\n${PLAN}\n\`\`\`" '{body: $body}')
    curl -s -X POST \
      -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
      -H "Accept: application/vnd.github+json" \
      -d "$COMMENT_BODY" \
      "https://api.github.com/repos/${REPO}/issues/${PR_ID}/comments"

